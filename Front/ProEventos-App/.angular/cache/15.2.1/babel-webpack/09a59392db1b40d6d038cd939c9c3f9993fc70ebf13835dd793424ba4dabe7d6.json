{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EventosComponent = class EventosComponent {\n  get filtroLista() {\n    return this.filtroListado;\n  }\n  set filtroLista(value) {\n    this.filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n  filtrarEventos(filtrarPor) {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1);\n  }\n  constructor(eventoService, modalService, toastr, spinner) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.eventos = [];\n    this.eventosFiltrados = [];\n    this.widthImg = 150;\n    this.marginImg = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  ngOnInit() {\n    this.spinner.show();\n    this.getEventos();\n    //this.spinner.show();\n    // ANALISAR O POR QUE O SPINNER NÂO ESTÁ APARECENDO A BOLINHA\n    //  /** spinner starts on init */\n    //  this.spinner.show();\n    //  setTimeout(() => {\n    //    /** spinner ends after 5 seconds */\n    //    this.spinner.hide();\n    //  }, 5000);\n  }\n\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  getEventos() {\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos;\n        this.eventosFiltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  // public getEventos(): void {\n  //   this.eventoService.getEventos().subscribe(\n  //     (eventoResp: Evento[]) => {\n  //       this.eventos = eventoResp;\n  //       this.eventosFiltrados = this.eventos;\n  //     },\n  //     error => console.log(error)\n  //   );\n  // }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-sm'\n    });\n  }\n  confirm() {\n    // this.message = 'Confirmed!';\n    this.modalRef?.hide();\n    this.toastr.success('Evento deletado com sucesso!', 'Sucesso!');\n  }\n  decline() {\n    // this.message = 'Declined!';\n    this.modalRef?.hide();\n  }\n};\nEventosComponent = __decorate([Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n})], EventosComponent);\nexport { EventosComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA6B,eAAe;AAcvD,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAW3B,IAAWC,WAAW;IACpB,OAAO,IAAI,CAACC,aAAa;EAC3B;EAEA,IAAWD,WAAW,CAACE,KAAa;IAClC,IAAI,CAACD,aAAa,GAAGC,KAAK;IAC1B,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACH,WAAW,GACxC,IAAI,CAACI,cAAc,CAAC,IAAI,CAACJ,WAAW,CAAC,GAAG,IAAI,CAACK,OAAO;EACtD;EAEOD,cAAc,CAACE,UAAkB;IACtCA,UAAU,GAAGA,UAAU,CAACC,iBAAiB,EAAE;IAC3C,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CACxBC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,IAClEG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,CAC9D;EACH;EAEAO,YACUC,aAA4B,EAC5BC,YAA4B,EAC5BC,MAAqB,EACrBC,OAA0B;IAH1B,kBAAa,GAAbH,aAAa;IACb,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,YAAO,GAAPC,OAAO;IA9BV,YAAO,GAAa,EAAE;IACtB,qBAAgB,GAAU,EAAE;IAE5B,aAAQ,GAAW,GAAG;IACtB,cAAS,GAAW,CAAC;IACrB,iBAAY,GAAY,IAAI;IAC3B,kBAAa,GAAW,EAAE;EA0B5B;EAECC,QAAQ;IACb,IAAI,CAACD,OAAO,CAACE,IAAI,EAAE;IACnB,IAAI,CAACC,UAAU,EAAE;IAEjB;IAEA;IAEA;IACA;IAEA;IACA;IACA;IACA;EAGF;;EAEOC,aAAa;IAClB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EACOF,UAAU;IACf,IAAI,CAACN,aAAa,CAACM,UAAU,EAAE,CAACG,SAAS,CAAC;MACxCC,IAAI,EAAGnB,OAAiB,IAAI;QAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtB,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACE,OAAO;MACtC,CAAC;MACDoB,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAACR,OAAO,CAACS,IAAI,EAAE;QACnB,IAAI,CAACV,MAAM,CAACS,KAAK,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAC3D,CAAC;MACDE,QAAQ,EAAE,MAAM,IAAI,CAACV,OAAO,CAACS,IAAI;KAClC,CAAC;EACJ;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAGAE,SAAS,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACI,IAAI,CAACU,QAAQ,EAAE;MAACE,KAAK,EAAE;IAAU,CAAC,CAAC;EACvE;EAEAC,OAAO;IACL;IACA,IAAI,CAACF,QAAQ,EAAEJ,IAAI,EAAE;IACrB,IAAI,CAACV,MAAM,CAACiB,OAAO,CAAC,8BAA8B,EAAE,UAAU,CAAC;EAEjE;EAEAC,OAAO;IACL;IACA,IAAI,CAACJ,QAAQ,EAAEJ,IAAI,EAAE;EACvB;CAID;AAvGY3B,gBAAgB,eAL5BD,SAAS,CAAC;EACTqC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWtC,gBAAgB,CAuG5B;SAvGYA,gBAAgB","names":["Component","EventosComponent","filtroLista","filtroListado","value","eventosFiltrados","filtrarEventos","eventos","filtrarPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","constructor","eventoService","modalService","toastr","spinner","ngOnInit","show","getEventos","alterarImagem","exibirImagem","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirm","success","decline","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Estudos\\Desktop\\Full Stack Angula com ASP NET\\ProEventos\\Front\\ProEventos-App\\src\\app\\components\\eventos\\eventos.component.ts"],"sourcesContent":["import { Component, OnInit, TemplateRef } from '@angular/core';\n\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { Evento } from '../../models/Evento';\nimport { EventoService } from '../../services/evento.service';\n\n@Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n})\nexport class EventosComponent implements OnInit {\n\n  modalRef?: BsModalRef;\n  public eventos: Evento[] = [];\n  public eventosFiltrados: any []= [];\n\n  public widthImg: number = 150;\n  public marginImg: number = 2;\n  public exibirImagem: boolean = true;\n  private filtroListado: string = '';\n\n  public get filtroLista() {\n    return this.filtroListado;\n  }\n\n  public set filtroLista(value: string) {\n    this.filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ?\n    this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n\n  public filtrarEventos(filtrarPor: string): Evento[] {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(\n      evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n        evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n    );\n  }\n\n  constructor(\n    private eventoService: EventoService,\n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService\n\n    ) { }\n\n  public ngOnInit(): void {\n    this.spinner.show();\n    this.getEventos();\n    \n    //this.spinner.show();\n\n    // ANALISAR O POR QUE O SPINNER NÂO ESTÁ APARECENDO A BOLINHA\n\n    //  /** spinner starts on init */\n    //  this.spinner.show();\n\n    //  setTimeout(() => {\n    //    /** spinner ends after 5 seconds */\n    //    this.spinner.hide();\n    //  }, 5000);\n\n\n  }\n\n  public alterarImagem(): void {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  public getEventos(): void {\n    this.eventoService.getEventos().subscribe({\n      next: (eventos: Evento[]) => {\n        this.eventos = eventos;\n        this.eventosFiltrados = this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n\n  // public getEventos(): void {\n  //   this.eventoService.getEventos().subscribe(\n  //     (eventoResp: Evento[]) => {\n  //       this.eventos = eventoResp;\n  //       this.eventosFiltrados = this.eventos;\n  //     },\n\n  //     error => console.log(error)\n  //   );\n  // }\n\n\n  openModal(template: TemplateRef<any>) : void{\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n  }\n\n  confirm(): void {\n    // this.message = 'Confirmed!';\n    this.modalRef?.hide();\n    this.toastr.success('Evento deletado com sucesso!', 'Sucesso!');\n\n  }\n\n  decline(): void {\n    // this.message = 'Declined!';\n    this.modalRef?.hide();\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}