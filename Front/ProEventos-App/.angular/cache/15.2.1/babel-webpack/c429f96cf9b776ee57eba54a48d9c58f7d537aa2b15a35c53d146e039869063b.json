{"ast":null,"code":"\"use strict\";\n\n// import { Component, OnInit, TemplateRef } from '@angular/core';\n// import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n// import { NgxSpinnerService } from 'ngx-spinner';\n// import { ToastrService } from 'ngx-toastr';\n// import { Evento } from '../../models/Evento';\n// import { EventoService } from '../../services/evento.service';\n// @Component({\n//   selector: 'app-eventos',\n//   templateUrl: './eventos.component.html',\n//   styleUrls: ['./eventos.component.scss']\n// })\n// export class EventosComponent implements OnInit {\n//   modalRef?: BsModalRef;\n//   public eventos: Evento[] = [];\n//   public eventosFiltrados: any = [];\n//   public widthImg: number = 100;\n//   public marginImg: number = 2;\n//   public exibirImagem: boolean = true;\n//   private filtroListado: string = '';\n//   public get filtroLista() {\n//     return this.filtroListado;\n//   }\n//   public set filtroLista(value: string) {\n//     this.filtroListado = value;\n//     this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n//   }\n//   public filtrarEventos(filtrarPor: string): Evento[] {\n//     filtrarPor = filtrarPor.toLocaleLowerCase();\n//     return this.eventos.filter(\n//       evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n//         evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n//     );\n//   }\n//   constructor(\n//     private eventoService: EventoService,\n//     private modalService: BsModalService,\n//     private toastr: ToastrService,\n//     private spinner: NgxSpinnerService\n//     ) { }\n//   public ngOnInit(): void {\n//    // this.spinner.show();\n//     this.getEventos();\n//     // ANALISAR O POR QUE O SPINNER NÂO ESTÁ APARECENDO A BOLINHA\n//     //  /** spinner starts on init */\n//     //  this.spinner.show();\n//     //  setTimeout(() => {\n//     //    /** spinner ends after 5 seconds */\n//     //    this.spinner.hide();\n//     //  }, 5000);\n//   }\n//   public alterarImagem(): void {\n//     this.exibirImagem = !this.exibirImagem;\n//   }\n//   public getEventos(): void {\n//     this.eventoService.getEventos().subscribe(\n//       (eventoResp: Evento[]) => {\n//         this.eventos = eventoResp;\n//         this.eventosFiltrados = this.eventos;\n//       },\n//       error => console.log(error)\n//     );\n//   }\n//   openModal(template: TemplateRef<any>) : void{\n//     this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n//   }\n//   confirm(): void {\n//     // this.message = 'Confirmed!';\n//     this.modalRef?.hide();\n//     this.toastr.success('Evento deletado com sucesso!', 'Sucesso!');\n//   }\n//   decline(): void {\n//     // this.message = 'Declined!';\n//     this.modalRef?.hide();\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA","names":[],"sourceRoot":"","sources":["C:\\Users\\Estudos\\Desktop\\Full Stack Angula com ASP NET\\ProEventos\\Front\\ProEventos-App\\src\\app\\components\\eventos\\eventos.component.ts"],"sourcesContent":["// import { Component, OnInit, TemplateRef } from '@angular/core';\n\n// import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n// import { NgxSpinnerService } from 'ngx-spinner';\n// import { ToastrService } from 'ngx-toastr';\n\n// import { Evento } from '../../models/Evento';\n// import { EventoService } from '../../services/evento.service';\n\n// @Component({\n//   selector: 'app-eventos',\n//   templateUrl: './eventos.component.html',\n//   styleUrls: ['./eventos.component.scss']\n// })\n// export class EventosComponent implements OnInit {\n\n//   modalRef?: BsModalRef;\n//   public eventos: Evento[] = [];\n//   public eventosFiltrados: any = [];\n\n//   public widthImg: number = 100;\n//   public marginImg: number = 2;\n//   public exibirImagem: boolean = true;\n//   private filtroListado: string = '';\n\n//   public get filtroLista() {\n//     return this.filtroListado;\n//   }\n\n//   public set filtroLista(value: string) {\n//     this.filtroListado = value;\n//     this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n//   }\n\n//   public filtrarEventos(filtrarPor: string): Evento[] {\n//     filtrarPor = filtrarPor.toLocaleLowerCase();\n//     return this.eventos.filter(\n//       evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n//         evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n//     );\n//   }\n\n//   constructor(\n//     private eventoService: EventoService,\n//     private modalService: BsModalService,\n//     private toastr: ToastrService,\n//     private spinner: NgxSpinnerService\n\n//     ) { }\n\n//   public ngOnInit(): void {\n//    // this.spinner.show();\n//     this.getEventos();\n\n//     // ANALISAR O POR QUE O SPINNER NÂO ESTÁ APARECENDO A BOLINHA\n\n//     //  /** spinner starts on init */\n//     //  this.spinner.show();\n\n//     //  setTimeout(() => {\n//     //    /** spinner ends after 5 seconds */\n//     //    this.spinner.hide();\n//     //  }, 5000);\n\n\n//   }\n\n//   public alterarImagem(): void {\n//     this.exibirImagem = !this.exibirImagem;\n//   }\n\n//   public getEventos(): void {\n//     this.eventoService.getEventos().subscribe(\n//       (eventoResp: Evento[]) => {\n//         this.eventos = eventoResp;\n//         this.eventosFiltrados = this.eventos;\n//       },\n\n//       error => console.log(error)\n//     );\n//   }\n\n\n//   openModal(template: TemplateRef<any>) : void{\n//     this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n//   }\n\n//   confirm(): void {\n//     // this.message = 'Confirmed!';\n//     this.modalRef?.hide();\n//     this.toastr.success('Evento deletado com sucesso!', 'Sucesso!');\n\n//   }\n\n//   decline(): void {\n//     // this.message = 'Declined!';\n//     this.modalRef?.hide();\n//   }\n\n// }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}