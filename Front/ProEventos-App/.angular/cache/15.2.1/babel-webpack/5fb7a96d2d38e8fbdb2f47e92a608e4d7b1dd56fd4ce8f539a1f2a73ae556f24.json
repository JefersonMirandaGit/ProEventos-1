{"ast":null,"code":"// import { Component, OnInit, TemplateRef } from '@angular/core';\nEventosComponent;\nexport class EventosComponent {\n  get filtroLista() {\n    return this.filtroListado;\n  }\n  set filtroLista(value) {\n    this.filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n  filtrarEventos(filtrarPor) {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1);\n  }\n  constructor(eventoService, modalService, toastr, spinner) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.eventos = [];\n    this.eventosFiltrados = [];\n    this.larguraImagem = 150;\n    this.margemImagem = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  ngOnInit() {\n    this.spinner.show();\n    this.getEventos();\n  }\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  getEventos() {\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos;\n        this.eventosFiltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-sm'\n    });\n  }\n  confirm() {\n    this.modalRef?.hide();\n    this.toastr.success('O Evento foi deletado com Sucesso.', 'Deletado!');\n  }\n  decline() {\n    this.modalRef?.hide();\n  }\n}","map":{"version":3,"mappings":"AAAA;AAqIAA,gBAAgB;AAEhB,OAAM,MAAOA,gBAAgB;EAU3B,IAAWC,WAAW;IACpB,OAAO,IAAI,CAACC,aAAa;EAC3B;EAEA,IAAWD,WAAW,CAACE,KAAa;IAClC,IAAI,CAACD,aAAa,GAAGC,KAAK;IAC1B,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACH,WAAW,GAAG,IAAI,CAACI,cAAc,CAAC,IAAI,CAACJ,WAAW,CAAC,GAAG,IAAI,CAACK,OAAO;EACjG;EAEOD,cAAc,CAACE,UAAkB;IACtCA,UAAU,GAAGA,UAAU,CAACC,iBAAiB,EAAE;IAC3C,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CACxBC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,IACpEG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,CAC5D;EACH;EAEAO,YACUC,aAA4B,EAC5BC,YAA4B,EAC5BC,MAAqB,EACrBC,OAA0B;IAH1B,kBAAa,GAAbH,aAAa;IACb,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,YAAO,GAAPC,OAAO;IA7BV,YAAO,GAAa,EAAE;IACtB,qBAAgB,GAAa,EAAE;IAE/B,kBAAa,GAAG,GAAG;IACnB,iBAAY,GAAG,CAAC;IAChB,iBAAY,GAAG,IAAI;IAClB,kBAAa,GAAG,EAAE;EAwBtB;EAEGC,QAAQ;IACb,IAAI,CAACD,OAAO,CAACE,IAAI,EAAE;IACnB,IAAI,CAACC,UAAU,EAAE;EACnB;EAEOC,aAAa;IAClB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEOF,UAAU;IACf,IAAI,CAACN,aAAa,CAACM,UAAU,EAAE,CAACG,SAAS,CAAC;MACxCC,IAAI,EAAGnB,OAAiB,IAAI;QAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtB,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACE,OAAO;MACtC,CAAC;MACDoB,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAACR,OAAO,CAACS,IAAI,EAAE;QACnB,IAAI,CAACV,MAAM,CAACS,KAAK,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAC3D,CAAC;MACDE,QAAQ,EAAE,MAAM,IAAI,CAACV,OAAO,CAACS,IAAI;KAClC,CAAC;EACJ;EAEAE,SAAS,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACI,IAAI,CAACU,QAAQ,EAAE;MAACE,KAAK,EAAE;IAAU,CAAC,CAAC;EACvE;EAEAC,OAAO;IACL,IAAI,CAACF,QAAQ,EAAEJ,IAAI,EAAE;IACrB,IAAI,CAACV,MAAM,CAACiB,OAAO,CAAC,oCAAoC,EAAE,WAAW,CAAC;EACxE;EAEAC,OAAO;IACL,IAAI,CAACJ,QAAQ,EAAEJ,IAAI,EAAE;EACvB","names":["EventosComponent","filtroLista","filtroListado","value","eventosFiltrados","filtrarEventos","eventos","filtrarPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","constructor","eventoService","modalService","toastr","spinner","ngOnInit","show","getEventos","alterarImagem","exibirImagem","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirm","success","decline"],"sourceRoot":"","sources":["C:\\Users\\Estudos\\Desktop\\Full Stack Angula com ASP NET\\ProEventos\\Front\\ProEventos-App\\src\\app\\components\\eventos\\eventos.component.ts"],"sourcesContent":["// import { Component, OnInit, TemplateRef } from '@angular/core';\n\n// import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n// import { NgxSpinnerService } from 'ngx-spinner';\n// import { ToastrService } from 'ngx-toastr';\n\n// import { Evento } from '../../models/Evento';\n// import { EventoService } from '../../services/evento.service';\n\n// @Component({\n//   selector: 'app-eventos',\n//   templateUrl: './eventos.component.html',\n//   styleUrls: ['./eventos.component.scss']\n// })\n// export class EventosComponent implements OnInit {\n\n//   modalRef?: BsModalRef;\n//   public eventos: Evento[] = [];\n//   public eventosFiltrados: any = [];\n\n//   public widthImg: number = 100;\n//   public marginImg: number = 2;\n//   public exibirImagem: boolean = true;\n//   private filtroListado: string = '';\n\n//   public get filtroLista() {\n//     return this.filtroListado;\n//   }\n\n//   public set filtroLista(value: string) {\n//     this.filtroListado = value;\n//     this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n//   }\n\n//   public filtrarEventos(filtrarPor: string): Evento[] {\n//     filtrarPor = filtrarPor.toLocaleLowerCase();\n//     return this.eventos.filter(\n//       evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n//         evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n//     );\n//   }\n\n//   constructor(\n//     private eventoService: EventoService,\n//     private modalService: BsModalService,\n//     private toastr: ToastrService,\n//     private spinner: NgxSpinnerService\n\n//     ) { }\n\n//   public ngOnInit(): void {\n//    // this.spinner.show();\n//     this.getEventos();\n\n//     // ANALISAR O POR QUE O SPINNER NÂO ESTÁ APARECENDO A BOLINHA\n\n//     //  /** spinner starts on init */\n//     //  this.spinner.show();\n\n//     //  setTimeout(() => {\n//     //    /** spinner ends after 5 seconds */\n//     //    this.spinner.hide();\n//     //  }, 5000);\n\n\n//   }\n\n//   public alterarImagem(): void {\n//     this.exibirImagem = !this.exibirImagem;\n//   }\n\n//   public getEventos(): void {\n//     this.eventoService.getEventos().subscribe(\n//       (eventoResp: Evento[]) => {\n//         this.eventos = eventoResp;\n//         this.eventosFiltrados = this.eventos;\n//       },\n\n//       error => console.log(error)\n//     );\n//   }\n\n\n//   openModal(template: TemplateRef<any>) : void{\n//     this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n//   }\n\n//   confirm(): void {\n//     // this.message = 'Confirmed!';\n//     this.modalRef?.hide();\n//     this.toastr.success('Evento deletado com sucesso!', 'Sucesso!');\n\n//   }\n\n//   decline(): void {\n//     // this.message = 'Declined!';\n//     this.modalRef?.hide();\n//   }\n\n\n\n// }\n\n// import { Component, OnInit, TemplateRef } from '@angular/core';\n// import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\n// import { ToastrService } from 'ngx-toastr';\n// import { NgxSpinnerService } from 'ngx-spinner';\n// import { EventoService } from '../../services/evento.service';\n// import { Evento } from '../../models/Evento';\n\n// @Component({\n//   selector: 'app-eventos',\n//   templateUrl: './eventos.component.html',\n//   styleUrls: ['./eventos.component.scss'],\n//   // providers: [EventoService]\n// })\n\n\nimport { Component, OnInit, TemplateRef } from '@angular/core';\n\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { Evento } from '../../models/Evento';\nimport { EventoService } from '../../services/evento.service';\n\n@Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n})\nEventosComponent\n\nexport class EventosComponent implements OnInit {\n  modalRef: BsModalRef | undefined;\n  public eventos: Evento[] = [];\n  public eventosFiltrados: Evento[] = [];\n\n  public larguraImagem = 150;\n  public margemImagem = 2;\n  public exibirImagem = true;\n  private filtroListado = '';\n\n  public get filtroLista(): string {\n    return this.filtroListado;\n  }\n\n  public set filtroLista(value: string) {\n    this.filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n\n  public filtrarEventos(filtrarPor: string): Evento[] {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(\n      evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n      evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n    );\n  }\n\n  constructor(\n    private eventoService: EventoService,\n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService\n  ) { }\n\n  public ngOnInit(): void {\n    this.spinner.show();\n    this.getEventos();\n  }\n\n  public alterarImagem(): void {\n    this.exibirImagem = !this.exibirImagem;\n  }\n\n  public getEventos(): void {\n    this.eventoService.getEventos().subscribe({\n      next: (eventos: Evento[]) => {\n        this.eventos = eventos;\n        this.eventosFiltrados = this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n\n  openModal(template: TemplateRef<any>): void {\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n  }\n\n  confirm(): void {\n    this.modalRef?.hide();\n    this.toastr.success('O Evento foi deletado com Sucesso.', 'Deletado!');\n  }\n\n  decline(): void {\n    this.modalRef?.hide();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}